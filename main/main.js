// Generated by CoffeeScript 1.9.3
(function() {
  var beginId, checkDisjointness, classes, createItem, createRow, finalizeRow, getASkeleton, getImageSkeleton, getLiSkeleton, iconclass, icondivSkeleton, imageKindToString, imageSkeleton, imageclass, makeLogos, makeTD, makeTDString, makeTableRow, makeTimeTable, makeTooltip, placeShortcuts, rgbaString, setBG, shortcuts, split, splitBy, timetableSettings, weekday;

  weekday = function(day) {
    switch (day) {
      case "Monday":
        return 0;
      case "Tuesday":
        return 1;
      case "Wednesday":
        return 2;
      case "Thursday":
        return 3;
      case "Fryday":
        return 4;
      case "Additional":
        return 5;
      default:
        return -1;
    }
  };

  beginId = function(time) {
    return (time - 800) / (timetableSettings.minDurationInH * 100);
  };

  shortcuts = [
    {
      name: "mensa",
      url: "http://www.studentenwerk-saarland.de/en/Essen/Essen-in-Saarbrucken/Speiseplan-aktuell",
      bgcolor: [255, 255, 255],
      logoid: "studentenwerk",
      square: true
    }, {
      name: "GitHub",
      url: "http://github.com",
      bgcolor: [255, 255, 255],
      logoid: "github-alternative",
      square: true
    }, {
      name: "amazon",
      url: "http://amazon.de",
      bgcolor: [255, 255, 255],
      logoid: "amazon",
      square: true
    }, {
      name: "youtube",
      url: "http://youtube.com",
      bgcolor: [255, 255, 255],
      logoid: "youtube",
      square: true
    }, {
      name: "lsf",
      url: "http://www.lsf.uni-saarland.de",
      bgcolor: [255, 255, 255],
      logoid: "uds",
      square: true
    }, {
      name: "google+",
      url: "http://plus.google.com",
      bgcolor: [255, 255, 255],
      logoid: "g+",
      square: true
    }, {
      name: "linkedin",
      url: "http://linkedin.com",
      bgcolor: [255, 255, 255],
      logoid: "linkedin",
      square: true
    }, {
      name: "calendar",
      url: "http://calendar.google.com",
      bgcolor: [255, 255, 255],
      logoid: "calendar",
      square: true
    }, {
      name: "dictcc",
      url: "http://dict.cc",
      bgcolor: [255, 255, 255],
      logoid: "dictcc",
      square: true
    }
  ];

  timetableSettings = {
    rows: function(minDurationInH) {
      return 10 / minDurationInH;
    },
    minDurationInH: 0.5
  };

  classes = [
    {
      name: "Multicore System Architecture",
      short: "SysArch II",
      color: [0, 122, 41],
      link: "https://www.lsf.uni-saarland.de/qisserver/rds?state=verpublish&status=init&vmfile=no&publishid=90532&moduleCall=webInfo&publishConfFile=webInfo&publishSubDir=veranstaltung",
      periods: [
        {
          weekday: weekday("Tuesday"),
          begin: beginId(1400),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }, {
          weekday: weekday("Fryday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }
      ]
    }, {
      name: "Database Management Systems",
      short: "DBMS",
      color: [255, 204, 0],
      link: "https://infosys.uni-saarland.de/teaching/ws15/dbms.php",
      periods: [
        {
          weekday: weekday("Thursday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS II",
          tutorial: false
        }
      ]
    }, {
      name: "Automated Reasoning",
      short: "Reasoning",
      color: [153, 0, 0],
      link: "https://www.lsf.uni-saarland.de/qisserver/rds?state=verpublish&status=init&vmfile=no&publishid=89924&moduleCall=webInfo&publishConfFile=webInfo&publishSubDir=veranstaltung",
      periods: [
        {
          weekday: weekday("Monday"),
          begin: beginId(1600),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }, {
          weekday: weekday("Thursday"),
          begin: beginId(1200),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }
      ]
    }, {
      name: "Machine Learning",
      short: "ML",
      color: [0, 102, 255],
      link: "http://www.ml.uni-saarland.de/Lectures/ML1516/ML1516.htm",
      periods: [
        {
          weekday: weekday("Wednesday"),
          begin: beginId(1400),
          duration: 4,
          room: "E1.3 HS I",
          tutorial: false
        }, {
          weekday: weekday("Fryday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS I",
          tutorial: false
        }
      ]
    }, {
      name: "Deep Learning",
      short: "Deep Learning",
      color: [204, 204, 204],
      link: "https://infosys.uni-saarland.de/teaching/ws15/deep%20learning.php",
      periods: [
        {
          weekday: weekday("Additional"),
          begin: beginId(800),
          duration: 4,
          tutorial: false
        }
      ]
    }, {
      name: "Admissible Search Enhancements",
      short: "Planning",
      color: [204, 204, 204],
      link: "http://fai.cs.uni-saarland.de/teaching/winter15-16/search-enhancements.html",
      periods: [
        {
          weekday: weekday("Additional"),
          begin: beginId(1000),
          duration: 4,
          tutorial: false
        }
      ]
    }
  ];

  setBG = function() {
    var r;
    r = Math.floor((Math.random() * 2) + 1);
    return document.body.style.backgroundImage = "url('../images/wallpapers/wallpaper" + r + ".jpg')";
  };

  split = function(items, length) {
    var counter, current, currentRow, i, item, j, k, len, numberOfRows, ref, res;
    numberOfRows = items.length / length;
    res = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res[i] = [];
    }
    counter = 0;
    currentRow = 0;
    for (k = 0, len = items.length; k < len; k++) {
      item = items[k];
      res[currentRow].push(item);
      current++;
      if (current >= length) {
        current = 0;
        currentRow++;
      }
    }
    return res;
  };

  splitBy = function(attribute, list) {
    var item, j, len, res1, res2;
    res1 = [];
    res2 = [];
    for (j = 0, len = list.length; j < len; j++) {
      item = list[j];
      (item[attribute] ? res1 : res2).push(item);
    }
    return [res1, res2];
  };

  placeShortcuts = function(shortcuts, itemsPerRow) {
    var j, len, list, results, row;
    list = $("#shortcut-list");
    results = [];
    for (j = 0, len = shortcuts.length; j < len; j++) {
      row = shortcuts[j];
      results.push(list.append(createRow(row, itemsPerRow)));
    }
    return results;
  };

  createRow = function(row, itemsPerRow) {
    var item, j, jqueryRow, len;
    jqueryRow = $("<div class='row'></div>");
    for (j = 0, len = row.length; j < len; j++) {
      item = row[j];
      jqueryRow.append(createItem(item, 12 / itemsPerRow));
    }
    return jqueryRow;
  };

  iconclass = "text-center pagination-centered tile";

  imageclass = "logo-";

  icondivSkeleton = "<div class='" + iconclass + "'></div>";

  imageSkeleton = "<img class='" + imageclass + "' src='../images/logos/'></img>";

  getLiSkeleton = function(colSize) {
    return "<li class='col-xs-" + colSize + "'></li>";
  };

  getASkeleton = function(url) {
    return "<a href='" + url + "' class='link-tile'></a>";
  };

  getImageSkeleton = function(name, cssClass) {
    return "<img class='" + cssClass + "' src='../images/logos/" + name + ".png'></img>";
  };

  imageKindToString = function(square) {
    if (square) {
      return "square";
    } else {
      return "rect";
    }
  };

  rgbaString = function(r, g, b, o) {
    return "rgba(" + r + "," + g + "," + b + "," + o + ")";
  };

  createItem = function(item, colSize) {
    var A, DIV, IMG, LI, b, bgcolor, g, imagecssclass, imagename, kindString, r, ref;
    ref = item.bgcolor, r = ref[0], g = ref[1], b = ref[2];
    bgcolor = item.bgcolor;
    kindString = imageKindToString(item.square);
    imagename = item.logoid + "-" + kindString;
    imagecssclass = imageclass + kindString;
    IMG = $(getImageSkeleton(imagename, imagecssclass));
    A = $(getASkeleton(item.url));
    DIV = $(icondivSkeleton);
    LI = $(getLiSkeleton(colSize));
    DIV.css("background-color", rgbaString(r, g, b, 0.5));
    if (item.logobordercolor != null) {
      IMG.css("border", "1px solid " + item.logobordercolor);
    }
    if (item.bordercolor != null) {
      DIV.css("border", "1px solid " + item.bordercolor);
    }
    DIV.append(IMG);
    A.append(DIV);
    LI.append(A);
    return LI;
  };

  makeLogos = function() {
    var full, ref, square;
    setBG();
    ref = splitBy("square", shortcuts), square = ref[0], full = ref[1];
    full = split(full, 4);
    square = split(square, 6);
    placeShortcuts(full, 4);
    return placeShortcuts(square, 6);
  };

  makeTooltip = function(subject, period) {
    return "";
  };

  makeTDString = function(color, tooltip, duration, name, link, room) {
    var td;
    return td = (" <td rowspan=" + duration + "\"> ") + (" <a class=\"class-" + duration + "\" ") + (" data-toggle=\"tooltip\" title=\"" + tooltip + "\" ") + (" href=" + link + " ") + (" style=\"background-color:" + color + ";\" > ") + (" " + name + " " + (room != null ? "<br> (" + room + ")" : "") + " ") + " </a></td> ";
  };

  makeTD = function(subject, period) {
    var b, color, duration, g, link, name, r, ref, room, tooltip;
    ref = subject.color, r = ref[0], g = ref[1], b = ref[2];
    color = rgbaString(r, g, b, 1.0);
    tooltip = makeTooltip(subject, period);
    name = subject.short;
    link = subject.link;
    duration = period.duration;
    room = period.room;
    return makeTDString(color, tooltip, duration, name, link, room);
  };

  finalizeRow = function(tds, rowIndex) {
    var effectiveRowIndex, hour, parity, row, time;
    effectiveRowIndex = (rowIndex - rowIndex % 2) / 2;
    parity = effectiveRowIndex % 2 === 0 ? "odd" : "even";
    hour = rowIndex % 4 === 0 ? 8 + rowIndex / 2 : -1;
    time = hour !== -1 ? hour + ":00" : void 0;
    row = " <tr class=\"tr-" + parity + "\"> ";
    row += " <td class=\"table-time\">" + (time != null ? time : "") + "</td> ";
    tds.forEach(function(td) {
      return row += td;
    });
    return row + "</tr>";
  };

  makeTableRow = function(rowIndex, blocked) {
    var blockValue, classString, j, k, l, len, len1, len2, period, ref, subject, tds, weekdayId;
    tds = [];
    for (weekdayId = j = 0, len = blocked.length; j < len; weekdayId = ++j) {
      blockValue = blocked[weekdayId];
      if (blockValue === -1) {
        for (k = 0, len1 = classes.length; k < len1; k++) {
          subject = classes[k];
          ref = subject.periods;
          for (l = 0, len2 = ref.length; l < len2; l++) {
            period = ref[l];
            if (period.begin === rowIndex && period.weekday === weekdayId) {
              tds[weekdayId] = makeTD(subject, period);
              blocked[weekdayId] = period.duration - 1;
            } else {
              classString = weekdayId === 5 ? 'table-additional' : '';
              if (tds[weekdayId] == null) {
                tds[weekdayId] = " <td class=\"" + classString + "\"></td> ";
              }
            }
          }
        }
      }
    }
    return finalizeRow(tds, rowIndex);
  };

  checkDisjointness = function() {
    return true;
  };

  makeTimeTable = function() {
    var blocked, index, j, lastRow, nextRow, ref, results, rowIndex, value;
    if (!checkDisjointness()) {
      throw RuntimeException;
    }
    blocked = [-1, -1, -1, -1, -1, -1];
    results = [];
    for (rowIndex = j = 0, ref = timetableSettings.rows(timetableSettings.minDurationInH); 0 <= ref ? j < ref : j > ref; rowIndex = 0 <= ref ? ++j : --j) {
      lastRow = $('#timetable tr:last');
      nextRow = makeTableRow(rowIndex, blocked);
      lastRow.after(nextRow);
      results.push((function() {
        var k, len, results1;
        results1 = [];
        for (index = k = 0, len = blocked.length; k < len; index = ++k) {
          value = blocked[index];
          if (value !== -1) {
            results1.push(blocked[index] = value - 1);
          }
        }
        return results1;
      })());
    }
    return results;
  };

  makeLogos();

  makeTimeTable();

}).call(this);
