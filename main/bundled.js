// Generated by CoffeeScript 1.9.3
(function() {
  var attackHandler, beginId, createDayElement, createEmptyLecture, createLecture, createTile, createTileContainer, dialogOpen, displayElement, displayLectures, enableAutoFocus, insertLectures, makeDialog, makeEmptyTimeTable, makeLogos, makeRGBA, makeSidebar, makeSidebarDiv, makeTimetable, open_translator_input_field, placeTile, removeElement, removeTimetable, resetInputOnClose, rgbaString, setGlobalShortcut, setup_translator, shortcuts, showTimetable, show_preferences, sidebarContent, subjects, swr3_id, timetableLayout, timetableObject, timetableOpen, timetableSettings, trigger_swr3, trigger_timetable, weekday, weekdayId;

  beginId = function(time) {
    return (time - 800) / (timetableSettings.minDurationInH * 100);
  };

  timetableSettings = {
    rows: function(minDurationInH) {
      return 10 / minDurationInH;
    },
    minDurationInH: 2
  };

  weekday = function(day) {
    switch (day) {
      case "Monday":
        return 0;
      case "Tuesday":
        return 1;
      case "Wednesday":
        return 2;
      case "Thursday":
        return 3;
      case "Friday":
        return 4;
      case "Seminar":
        return 5;
      default:
        return -1;
    }
  };

  weekdayId = function(day) {
    switch (day) {
      case 0:
        return "Monday";
      case 1:
        return "Tuesday";
      case 2:
        return "Wednesday";
      case 3:
        return "Thursday";
      case 4:
        return "Friday";
      case 5:
        return "Seminar";
      default:
        return -1;
    }
  };

  rgbaString = function(r, g, b, o) {
    return "rgba(" + r + "," + g + "," + b + "," + o + ")";
  };

  shortcuts = [
    {
      name: "calendar",
      url: "http://calendar.google.com",
      bgcolor: [255, 255, 255],
      logoid: "calendar"
    }, {
      name: "mensa",
      url: "http://www.studentenwerk-saarland.de/en/Essen/Essen-in-Saarbrucken/Speiseplan-aktuell",
      bgcolor: [255, 255, 255],
      logoid: "studentenwerk"
    }, {
      name: "amazon",
      url: "http://amazon.de",
      bgcolor: [255, 255, 255],
      logoid: "amazon"
    }, {
      name: "GitHub",
      url: "http://github.com",
      bgcolor: [255, 255, 255],
      logoid: "github-alternative"
    }, {
      name: "lsf",
      url: "http://www.lsf.uni-saarland.de",
      bgcolor: [255, 255, 255],
      logoid: "uds"
    }, {
      name: "dictcc",
      url: "http://dict.cc",
      bgcolor: [255, 255, 255],
      logoid: "dictcc"
    }, {
      name: "linkedin",
      url: "http://linkedin.com",
      bgcolor: [255, 255, 255],
      logoid: "linkedin"
    }, {
      name: "youtube",
      url: "http://youtube.com",
      bgcolor: [255, 255, 255],
      logoid: "youtube"
    }, {
      name: "GooglePlus",
      url: "http://plus.google.com",
      bgcolor: [255, 255, 255],
      logoid: "g+"
    }, {
      name: "humblebundle",
      url: "http://www.humblebundle.com/",
      bgcolor: [255, 255, 255],
      logoid: "humblebundle"
    }
  ];

  timetableLayout = {
    width: 6,
    height: 5
  };

  subjects = [
    {
      name: "Multicore System Architecture",
      short: "SysArch II",
      color: [0, 122, 41],
      link: "http://www-wjp.cs.uni-saarland.de/lehre/vorlesung/rechnerarchitektur/ws15/",
      periods: [
        {
          weekday: weekday("Tuesday"),
          begin: beginId(1400),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }, {
          weekday: weekday("Friday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }
      ]
    }, {
      name: "Database Management Systems",
      short: "DBMS",
      color: [255, 204, 0],
      link: "https://infosys.uni-saarland.de/teaching/ws15/dbms.php",
      periods: [
        {
          weekday: weekday("Thursday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS II",
          tutorial: false
        }
      ]
    }, {
      name: "Automated Reasoning",
      short: "Reasoning",
      color: [153, 0, 0],
      link: "https://www.mpi-inf.mpg.de/departments/automation-of-logic/teaching/winter-20142015/automated-reasoning/",
      periods: [
        {
          weekday: weekday("Monday"),
          begin: beginId(1600),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }, {
          weekday: weekday("Thursday"),
          begin: beginId(1200),
          duration: 4,
          room: "E1.3 HS III",
          tutorial: false
        }
      ]
    }, {
      name: "Machine Learning",
      short: "ML",
      color: [0, 102, 255],
      link: "http://www.ml.uni-saarland.de/Lectures/ML1516/ML1516.htm",
      periods: [
        {
          weekday: weekday("Wednesday"),
          begin: beginId(1400),
          duration: 4,
          room: "E1.3 HS I",
          tutorial: false
        }, {
          weekday: weekday("Friday"),
          begin: beginId(1000),
          duration: 4,
          room: "E1.3 HS I",
          tutorial: false
        }
      ]
    }, {
      name: "Deep Learning",
      short: "Deep Learning",
      color: [204, 204, 204],
      link: "https://infosys.uni-saarland.de/teaching/ws15/deep%20learning.php",
      periods: [
        {
          weekday: weekday("Seminar"),
          begin: beginId(800),
          duration: 4,
          tutorial: false
        }
      ]
    }, {
      name: "Admissible Search Enhancements",
      short: "Planning",
      color: [204, 204, 204],
      link: "http://fai.cs.uni-saarland.de/teaching/winter15-16/search-enhancements.html",
      periods: [
        {
          weekday: weekday("Seminar"),
          begin: beginId(1000),
          duration: 4,
          tutorial: false
        }
      ]
    }, {
      name: "Theory of Distributed Systems",
      short: "Distributed Systems",
      color: [0, 0, 255],
      link: "https://www.mpi-inf.mpg.de/de/departments/algorithms-complexity/teaching/winter-20152016/theory-of-distributed-systems/",
      periods: [
        {
          weekday: weekday("Monday"),
          begin: beginId(1200),
          duration: 4,
          tutorial: false,
          prof: "Christoph Lenzen",
          room: "E1.4 023"
        }
      ]
    }
  ];

  swr3_id = "cbbeihlbfknckekkafdljfonbjgaelkb";

  createEmptyLecture = function() {
    return $("<div class='empty-period'></div>");
  };

  makeRGBA = function(colors, op) {
    var b, g, r;
    r = colors[0], g = colors[1], b = colors[2];
    return rgbaString(r, g, b, op);
  };

  createLecture = function(subject, period) {
    var content, res;
    content = "<span>";
    content += "<big><big> " + subject.short + " </big></big>";
    if (period.room != null) {
      content += "<br>" + period.room;
    }
    if (period.prof != null) {
      content += "<br>" + period.prof;
    }
    content += "</span>";
    res = $("<div class='period'>" + content + "</div>");
    res.css("background", makeRGBA(subject.color, 0.9));
    res.click(function() {
      return chrome.tabs.update({
        url: subject.link
      });
    });
    return res;
  };

  insertLectures = function(tt, subjects) {
    var i, lec, len, period, results, subject;
    results = [];
    for (i = 0, len = subjects.length; i < len; i++) {
      subject = subjects[i];
      results.push((function() {
        var j, len1, ref, results1;
        ref = subject.periods;
        results1 = [];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          period = ref[j];
          lec = createLecture(subject, period);
          results1.push(tt[period.weekday][period.begin + 1] = lec);
        }
        return results1;
      })());
    }
    return results;
  };

  displayLectures = function(tt) {
    var i, len, results, root, slot;
    root = $("#timetable-body");
    results = [];
    for (i = 0, len = tt.length; i < len; i++) {
      weekday = tt[i];
      results.push((function() {
        var j, len1, results1;
        results1 = [];
        for (j = 0, len1 = weekday.length; j < len1; j++) {
          slot = weekday[j];
          results1.push(root.append(slot));
        }
        return results1;
      })());
    }
    return results;
  };

  createDayElement = function(day) {
    console.log(day);
    return $("<div class=weekday><span>" + (weekdayId(day)) + "</span></div>");
  };

  makeEmptyTimeTable = function(layout) {
    var day, i, j, ref, ref1, res, slot;
    res = [];
    for (day = i = 0, ref = layout.width; 0 <= ref ? i < ref : i > ref; day = 0 <= ref ? ++i : --i) {
      res.push([]);
      res[day].push(createDayElement(day));
      for (slot = j = 0, ref1 = layout.height; 0 <= ref1 ? j < ref1 : j > ref1; slot = 0 <= ref1 ? ++j : --j) {
        res[day].push(createEmptyLecture());
      }
    }
    return res;
  };

  makeTimetable = function() {
    var tt;
    tt = makeEmptyTimeTable(timetableLayout);
    insertLectures(tt, subjects);
    return displayLectures(tt);
  };

  displayElement = function(identifier) {
    return $("#" + identifier).removeClass("invisible");
  };

  removeElement = function(identifier) {
    return $("#" + identifier).addClass("invisible");
  };

  showTimetable = function() {
    displayElement("timetable-body");
    return removeElement("icon-body");
  };

  removeTimetable = function() {
    removeElement("timetable-body");
    return displayElement("icon-body");
  };

  timetableOpen = false;

  timetableObject = void 0;

  trigger_timetable = function() {
    if (timetableOpen) {
      removeTimetable();
    } else {
      showTimetable();
    }
    return timetableOpen = !timetableOpen;
  };

  show_preferences = function() {
    return 0;
  };

  trigger_swr3 = function() {
    return chrome.runtime.sendMessage(swr3_id, {
      intent: "trigger_swr3"
    });
  };

  makeSidebarDiv = function(element, id) {
    return $(" <div class='sidebar-item'><img class='sidebar-icon' id='" + id + "' src='../images/sidebar/" + element.icon + "'></img></div> ");
  };

  open_translator_input_field = function() {
    return 0;
  };

  makeDialog = function() {
    return $("<div class=\"modal fade\" id=\"sidebar-input-dialog\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n  \n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title\">Enter your query:</h4>\n      </div>\n      <div class=\"modal-body\">\n        <input type=\"text\" autofocus id=\"sidebar-input-dialog-field\"> <button type=\"submit\" id=\"sidebar-input-dialog-submit\">Go!</button>\n      </div>\n    </div>\n    \n  </div>\n</div>");
  };

  setGlobalShortcut = function(keycode, call) {
    return $("body").keydown(function(event) {
      if (event.which === keycode && !dialogOpen()) {
        return call();
      }
    });
  };

  dialogOpen = function() {
    var ref, ref1;
    return (ref = $("#sidebar-input-dialog")) != null ? (ref1 = ref.data('bs.modal')) != null ? ref1.isShown : void 0 : void 0;
  };

  enableAutoFocus = function() {
    return $('.modal').on('shown.bs.modal', function() {
      return $(this).find('[autofocus]').focus();
    });
  };

  resetInputOnClose = function() {
    return $('.modal').on('hidden.bs.modal', function() {
      return $("#sidebar-input-dialog-field").val("");
    });
  };

  setup_translator = function(item, id) {
    var dialog, dialog_field, element;
    element = $("#" + id);
    element.attr("data-toggle", "modal");
    element.attr("data-target", "#sidebar-input-dialog");
    dialog = makeDialog();
    $("#sidebar-body").append(dialog);
    dialog_field = $("#sidebar-input-dialog-field");
    dialog_field.keydown(function(event) {
      var content;
      if (event.which === 13) {
        event.preventDefault();
        content = $("#sidebar-input-dialog-field").val();
        return chrome.tabs.update({
          url: "http://www.dict.cc/?s=" + content
        });
      }
    });
    setGlobalShortcut(item.hotkey, function() {
      return element.click();
    });
    resetInputOnClose();
    return enableAutoFocus();
  };

  sidebarContent = [
    {
      name: "preferences",
      icon: "cog.png",
      call: show_preferences
    }, {
      name: "timetable",
      icon: "timetable.png",
      call: trigger_timetable
    }, {
      name: "swr3",
      icon: "swr3.png",
      call: trigger_swr3
    }, {
      name: "translator",
      icon: "translator.png",
      call: open_translator_input_field,
      setup: setup_translator,
      hotkey: 84
    }
  ];

  makeSidebar = function() {
    var div, element, i, id, index, len, results, sidebar;
    sidebar = $("#sidebar-body");
    results = [];
    for (index = i = 0, len = sidebarContent.length; i < len; index = ++i) {
      element = sidebarContent[index];
      id = "sidebar-icon-" + element.name;
      div = makeSidebarDiv(element, id);
      sidebar.append(div);
      $("#" + id).click(element.call);
      results.push(typeof element.setup === "function" ? element.setup(element, id) : void 0);
    }
    return results;
  };

  createTile = function(item) {
    var HELPER, IMG, TILE, b, g, handler, id, r, ref;
    ref = item.bgcolor, r = ref[0], g = ref[1], b = ref[2];
    id = "shortcut-tile-" + item.name;
    HELPER = $("<span class='alignment-helper'></span>");
    IMG = $("<img src='../images/logos/" + item.logoid + ".png'></img>");
    TILE = $("<div class='tile' id='" + id + "'></div>");
    TILE.css("background-color", rgbaString(r, g, b, 0.5));
    if (item.logobordercolor != null) {
      IMG.css("border", "1px solid " + item.logobordercolor);
    }
    if (item.bordercolor != null) {
      TILE.css("border", "1px solid " + item.bordercolor);
    }
    TILE.append(HELPER);
    TILE.append(IMG);
    handler = function() {
      console.log("called");
      return chrome.tabs.update({
        url: item.url
      });
    };
    return [TILE, id, handler];
  };

  attackHandler = function(id, handler) {
    return $("#" + id).click(handler);
  };

  placeTile = function(root, tile) {
    return root.append(tile);
  };

  createTileContainer = function(root) {
    return $("<div class='tile-container'></div>");
  };

  makeLogos = function() {
    var handler, i, id, item, len, ref, results, root, tile;
    root = $("#icon-body");
    results = [];
    for (i = 0, len = shortcuts.length; i < len; i++) {
      item = shortcuts[i];
      ref = createTile(item), tile = ref[0], id = ref[1], handler = ref[2];
      placeTile(root, tile);
      results.push(attackHandler(id, handler));
    }
    return results;
  };

  makeSidebar([void 0, void 0, trigger_swr3, open_translator_input_field], [void 0, void 0, void 0, setup_translator]);

  makeLogos();

  makeTimetable();

}).call(this);
